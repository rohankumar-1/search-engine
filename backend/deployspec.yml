version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo Installing deployment tools...
      - pip install --upgrade awscli
      - pip install boto3

  pre_build:
    commands:
      - echo Preparing for deployment...
      - cd backend
      - mkdir -p scripts
      
      # Create deployment script for EC2 instances
      - |
        cat > scripts/deploy.sh << 'EOL'
        #!/bin/bash
        
        # Stop the current service if it exists
        if systemctl is-active --quiet financial-news.service; then
          systemctl stop financial-news.service
        fi
        
        # Extract the deployment package
        cd /opt/financial-news-engine
        unzip -o /tmp/backend.zip -d .
        
        # Install dependencies
        pip3 install -r requirements.txt
        
        # Restart the service
        systemctl daemon-reload
        systemctl start financial-news.service
        
        # Check status
        systemctl status financial-news.service
        EOL
        
      # Make script executable
      - chmod +x scripts/deploy.sh
      
      # Create appspec.yml for SSM deployments
      - |
        cat > appspec.yml << 'EOL'
        version: 0.0
        os: linux
        files:
          - source: dist/backend.zip
            destination: /tmp/
        hooks:
          BeforeInstall:
            - location: scripts/before_install.sh
              timeout: 300
              runas: root
          AfterInstall:
            - location: scripts/deploy.sh
              timeout: 300
              runas: root
        EOL
      
      # Create before_install script
      - |
        cat > scripts/before_install.sh << 'EOL'
        #!/bin/bash
        
        # Create app directory if it doesn't exist
        mkdir -p /opt/financial-news-engine
        
        # Backup existing application
        if [ -d "/opt/financial-news-engine/backup" ]; then
          rm -rf /opt/financial-news-engine/backup
        fi
        
        if [ -f "/opt/financial-news-engine/app.py" ]; then
          mkdir -p /opt/financial-news-engine/backup
          cp -r /opt/financial-news-engine/* /opt/financial-news-engine/backup/
        fi
        EOL
        
      # Make script executable
      - chmod +x scripts/before_install.sh

  build:
    commands:
      - echo Getting backend auto scaling group...
      - export ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue" --output text)
      - echo Auto Scaling Group: $ASG_NAME
      
      # Get the instance IDs from the Auto Scaling Group
      - export INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query "AutoScalingGroups[0].Instances[].InstanceId" --output text)
      - echo Instances to deploy to: $INSTANCE_IDS

  post_build:
    commands:
      - echo Starting deployment to instances...
      
      # Use SSM Run Command to deploy to each instance
      - |
        for INSTANCE_ID in $INSTANCE_IDS; do
          echo "Deploying to instance $INSTANCE_ID"
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceids,Values=$INSTANCE_ID" \
            --parameters "commands=[
              \"mkdir -p /tmp/deployment\",
              \"aws s3 cp s3://$S3_BUCKET/backend.zip /tmp/backend.zip\",
              \"bash /tmp/deployment/scripts/before_install.sh\",
              \"bash /tmp/deployment/scripts/deploy.sh\"
            ]" \
            --output-s3-bucket-name $S3_BUCKET \
            --output-s3-key-prefix "deployments/$INSTANCE_ID" \
            --query "Command.CommandId" --output text)
          
          echo "Deployment started with command ID: $COMMAND_ID"
          aws ssm wait command-executed --command-id $COMMAND_ID --instance-id $INSTANCE_ID
          echo "Deployment completed on instance $INSTANCE_ID"
        done
      
      - echo Deployment completed on `date`

artifacts:
  files:
    - backend/appspec.yml
    - backend/scripts/**/*
    - backend/dist/backend.zip
  discard-paths: yes 